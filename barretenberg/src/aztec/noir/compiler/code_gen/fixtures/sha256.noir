uint32[64] round_constants = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

uint32[8] init_constants = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
];

uint32[8] sha256_block(uint32[8] h_init, uint32[16] input)
{
    uint32[64] w;

    /**
     * Fill first 16 words with the message schedule
     **/
    for (i in 0..16) {
        w[i] = input[i];
    }

    /**
     * Extend the input data into the remaining 48 words
     **/
    for (i in 16..64)
    {
        uint32 s0 = w[i - 15] >>> 7 ^ w[i - 15] >>> 18 ^ (w[i - 15] >> 3);
        uint32 s1 = w[i - 2] >>> 17 ^ w[i - 2] >>> 19 ^ (w[i - 2] >> 10);
        w[i] = w[i - 16] +  w[i - 7] + s0 + s1;
    }

    /**
     * Initialize round variables with previous block output
     **/
    uint32 a = h_init[0];
    uint32 b = h_init[1];
    uint32 c = h_init[2];
    uint32 d = h_init[3];
    uint32 e = h_init[4];
    uint32 f = h_init[5];
    uint32 g = h_init[6];
    uint32 h = h_init[7];

    /**
     * Apply SHA-256 compression function to the message schedule
     **/
    for (i in 0..64) {
        uint32 S1 = e >>> 6 ^ e >>> 11 ^ e >>> 25;
        uint32 ch = (e & f) + (~e & g);
        uint32 temp1 = h + S1 + ch + round_constants[i] + w[i];
        uint32 S0 = a >>> 2 ^ a >>> 13 ^ a >>> 22;
        uint32 T0 = (b & c);
        uint32 maj = (a & (b + c - (T0 * 2))) + T0; // === (a & b) ^ (a & c) ^ (b & c)
        uint32 temp2 = S0 + maj;

        h = g;
        g = f;
        f = e;
        e = d + temp1;
        d = c;
        c = b;
        b = a;
        a = temp1 + temp2;
    }

    /**
     * Add into previous block output and return
     **/
    return [
        a + h_init[0],
        b + h_init[1],
        c + h_init[2],
        d + h_init[3],
        e + h_init[4],
        f + h_init[5],
        g + h_init[6],
        h + h_init[7]
    ];
}

uint32 get_num_blocks(uint32 num_bits)
{
    uint32 extra_bits = 65;
    uint32 leftovers = (num_bits + extra_bits) % 512;
    // No conditional support yet. 0 / 0 = 0; x / x = 1;
    uint32 additional = leftovers / leftovers;
    uint32 num_blocks = ((num_bits + extra_bits) / 512) + additional;
    return num_blocks;
}

uint8[32] sha256(uint8[] input)
{
    uint32 num_bytes = length(input);
    uint32 num_bits = num_bytes * 8;
    uint32 num_blocks = get_num_blocks(num_bits);
    uint32 total_bits = num_blocks * 512;

    bool[total_bits] data;
    for (i in 0..num_bytes) {
        for (j in 0..8) {
            data[i * 8 + j] = input[i][j];
        }
    }
    data[num_bits] = true;
    for (i in 0..32) {
        data[total_bits - 32 + i] = num_bits[i];
    }

    uint32[8] rolling_hash = init_constants;
    for (i in 0..num_blocks) {
        uint32[16] hash_input;
        for (j in 0..512) {
            hash_input[j / 32][j % 32] = data[i * 512 + j];
        }
        rolling_hash = sha256_block(rolling_hash, hash_input);
    }

    uint8[32] result;
    for (i in 0..32) {
        for (j in 0..8) {
            result[i][j] = rolling_hash[i * 8 / 32][(i * 8 + j) % 32];
        }
    }
    return result;
}

uint8[32] main(uint8[] input) {
    return sha256(input);
}